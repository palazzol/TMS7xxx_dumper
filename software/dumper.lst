0001   0000             ;
0002   0000             ; Original Code and hardware by Frank Palazzolo
0003   0000             ; Code written and working sometime in the early 2000's
0004   0000             ; Source Reverse-engineered from Binary(!)
0005   0000             ; And updated for standard SPI master interface - 2022-October
0006   0000             ; Added Chip ID functions, 2022-November
0007   0000             ; Switched to Memory-Mapped I/O, added support for CT and Piggyback chips - 2022-December
0008   0000             ;
0009   0000             ; This code can be built with TASM Version 3.2:
0010   0000             ;   tasm -70 -g3 -s dumper.asm dumper.bin
0011   0000             ;
0012   0000             ; Dumper code for all TMS7000 series parts
0013   0000             ;
0014   0000             ; Hardware connections:
0015   0000             ;
0016   0000             ; ~INT1 and ~INT3 wired to +5 - pins 13 and 12 on DIP
0017   0000             ; Arduino can be written to by writing to any external memory address (code uses 0x1000)
0018   0000             ; MC set to Vcc on startup by Arduino
0019   0000             ; First write of 0x55 signals Arduino to flip MC from high to low
0020   0000             ; Second write to Arduino is the ChipID byte
0021   0000             ; Subsequent writes are dumps of Internal ROM
0022   0000             ;   (length is dependant on the ChipID byte)
0023   0000             ;
0024   0000             ; When External Memory is enabled:
0025   0000             ;
0026   0000             ; Port B, bit 4 - Pin 38 on DIP - ALATCH
0027   0000             ; Port B, bit 5 - Pin 1 on DIP  - R/~W 
0028   0000             ; Port B, bit 6 - Pin 39 on DIP - ~ENABLE
0029   0000             ; Port B, bit 7 - Pin 2 on DIP  - CLKOUT 
0030   0000             ; Port C, all   - Address Low / Data Bus
0031   0000             ; Port D, all*  - Address High Bus
0032   0000             ; NOTE: Since the CT chips only have the upper 4 bits of Port D,
0033   0000             ; We have mapped external memory such that every 4K block of TMS7000 space
0034   0000             ; contains 16 copies of a single 256 byte block of the ROM chip
0035   0000             ;
0036   0000             ; Chip starts up in Microprocessor mode, executing ROM from external memory
0037   0000             ; 1) Boots to 0x1000 - Code checks ram size and for presence of serial port, to generate initial ID byte
0038   0000             ; 2) Trojan Code segment is copied from external ROM to internal RAM
0039   0000             ; 3) Jump to code in internal RAM 
0040   0000             ; 4) RAM-resident code sends Arduino a 0x55 to switch modes, enabling internal ROM
0041   0000             ; 5) Jump back to external ROM
0042   0000             ; 6) Code determines internal ROM size and adjusts ID byte
0043   0000             ; 7) Code writes out bytes to Arduino:
0044   0000             ;    ID byte, followed by internal ROM bytes
0045   0000             
0046   0000             ; RAM Layout
0047   0000             ; 0x00-0x07 - A,B,R2-R7 Used as general purpose storage
0048   0000             ; 0x08-0x18 - Reserved for Trojan program
0049   0000             ; 0x19-0x7E - Spare
0050   0000             ; 0x7F      - used to determine RAM size
0051   0000             
0052   0000             ; ID Byte bit definition:
0053   0000             ;
0054   0000             ; bit 0:    0 = No Serial Port, 1 = Serial Port detected
0055   0000             ; bit 1:    0 = 128 bytes of RAM, 1 = 256 bytes of RAM
0056   0000             ; bits 2-5: number of 2K blocks of Internal ROM present (0-8) = (0K-16K)
0057   0000             ; bits 6-7: unused
0058   0000             
0059   0000             ;R0      .equ    0   ; AKA A Register
0060   0000             ;R1      .equ    1   ; AKA B Register
0061   0000             
0062   0000             R2      .equ    2   ; Used as a Counter variable
0063   0000             R3      .equ    3   ; Used for ID byte
0064   0000             R4      .equ    4   ; R4:R5 used as primary 2-byte Memory Index
0065   0000             R5      .equ    5
0066   0000             R6      .equ    6   ; R6:R7 used as secondary 2-byte Memory Index
0067   0000             R7      .equ    7
0068   0000             
0069   0000             ; peripherals
0070   0000             
0071   0000             IOCNT0  .equ    0       ; Peripheral address to control CPU modes
0072   0000             ARDADDR .equ    $1000   ; Address to write a byte to the Arduino
0073   0000             SCTL1   .equ    21      ; Peripheral address to probe for a Serial Port on the 70x2
0074   0000             SCTL1C  .equ    24      ; Peripheral address to probe for a Serial Port on the 70Cx2
0075   0000             FDDR    .equ    $1F     ; Peripheral address to probe for Port F
0076   0000             
0077   0000             RAMDEST .equ    $0008       ; location in ram for the code to be copied into and run from
0078   0000             
0079   0000             ; Binary image Layout:
0080   0000             ; We fill 64K of space with this program, but we only use 4K of it in the ROM
0081   0000             ; Each 4K block contains only 256 bytes of info
0082   0000             
0083   0000             ; 0x0X00 is unused.  The first 256 bytes will appear in the ROM
0084   0000             
0085   0000                     .ORG    $0000       ; nothing here, fill with zeros
0086   0000 00 00 00 00         .FILL   $100,$00
0086   0004 00 00 00 00 
0086   0008 00 00 00 00 
0086   000C 00 00 00 00 
0086   0010 00 00 00 00 
0086   0014 00 00 00 00 
0086   0018 00 00 00 00 
0086   001C 00 00 00 00 
0086   0020 00 00 00 00 
0086   0024 00 00 00 00 
0086   0028 00 00 00 00 
0086   002C 00 00 00 00 
0086   0030 00 00 00 00 
0086   0034 00 00 00 00 
0086   0038 00 00 00 00 
0086   003C 00 00 00 00 
0086   0040 00 00 00 00 
0086   0044 00 00 00 00 
0086   0048 00 00 00 00 
0086   004C 00 00 00 00 
0086   0050 00 00 00 00 
0086   0054 00 00 00 00 
0086   0058 00 00 00 00 
0086   005C 00 00 00 00 
0086   0060 00 00 00 00 
0086   0064 00 00 00 00 
0086   0068 00 00 00 00 
0086   006C 00 00 00 00 
0086   0070 00 00 00 00 
0086   0074 00 00 00 00 
0086   0078 00 00 00 00 
0086   007C 00 00 00 00 
0086   0080 00 00 00 00 
0086   0084 00 00 00 00 
0086   0088 00 00 00 00 
0086   008C 00 00 00 00 
0086   0090 00 00 00 00 
0086   0094 00 00 00 00 
0086   0098 00 00 00 00 
0086   009C 00 00 00 00 
0086   00A0 00 00 00 00 
0086   00A4 00 00 00 00 
0086   00A8 00 00 00 00 
0086   00AC 00 00 00 00 
0086   00B0 00 00 00 00 
0086   00B4 00 00 00 00 
0086   00B8 00 00 00 00 
0086   00BC 00 00 00 00 
0086   00C0 00 00 00 00 
0086   00C4 00 00 00 00 
0086   00C8 00 00 00 00 
0086   00CC 00 00 00 00 
0086   00D0 00 00 00 00 
0086   00D4 00 00 00 00 
0086   00D8 00 00 00 00 
0086   00DC 00 00 00 00 
0086   00E0 00 00 00 00 
0086   00E4 00 00 00 00 
0086   00E8 00 00 00 00 
0086   00EC 00 00 00 00 
0086   00F0 00 00 00 00 
0086   00F4 00 00 00 00 
0086   00F8 00 00 00 00 
0086   00FC 00 00 00 00 
0087   0100             
0088   0100             ; 0x1X00 contains the code block.  Only 256 bytes are available.
0089   0100             
0090   1000                     .ORG    $1000
0091   1000             
0092   1000                     ; Initialize port, stack
0093   1000             START:
0094   1000 52 0C               MOV     %$0C,B      ; B  = 0C
0095   1002 0D                  LDSP                ; SP = 000C - we don't use stack anyway
0096   1003 A2 AA 00            MOVP    %$AA,IOCNT0 ; Disable some interrupts, set for Full Expansion mode after mode switch
0097   1006             
0098   1006                     ; Try to identify this chip and store a code in R3
0099   1006 72 00 03            MOV     %$00,R3     ; Initialize ID byte to 0, (128 bytes of RAM)
0100   1009             
0101   1009             RAMCHK:
0102   1009                     ; Identify RAM size:
0103   1009                     ; do checks twice with different data,
0104   1009                     ; to protect against random luck matches
0105   1009             
0106   1009 72 55 FF            MOV     %$55,$ff
0107   100C 72 AA 7F            MOV     %$AA,$7f
0108   100F 7D 55 FF            CMP     %$55,$ff    ; check for 256 bytes working
0109   1012 E6 0E               JNZ     SERCHK      ; if fail, 128 bytes - jump to next step
0110   1014 72 AA FF            MOV     %$AA,$ff
0111   1017 72 55 7F            MOV     %$55,$7f
0112   101A 7D AA FF            CMP     %$AA,$ff    ; doublecheck for 256 bytes working
0113   101D E6 03               JNZ     SERCHK      ; if fail, 128 bytes - jump to next step
0114   101F             
0115   101F             RAM256:
0116   101F 72 02 03            MOV     %$02,R3     ; We have 256 bytes or RAM
0117   1022             
0118   1022                     ; Try to store bottom two bits of SCTL1 register and see if they "stay"
0119   1022                     ; if so, we have a UART
0120   1022                     ; We try both the locations, once for the 70X2 chip, and then the 70CX2 chip
0121   1022             
0122   1022             SERCHK:
0123   1022 A3 FC 15            ANDP    %$FC,SCTL1  ; zero the 2 LS bits
0124   1025 80 15               MOVP    SCTL1,A
0125   1027 23 03               AND     %$03,A
0126   1029 E6 16               JNZ     SERCHKC     ; fail if not zero
0127   102B A4 01 15            ORP     %$01,SCTL1  ; set the bottom bit
0128   102E 80 15               MOVP    SCTL1,A
0129   1030 23 03               AND     %$03,A 
0130   1032 2D 01               CMP     %$01,A      ; check if it's a one now
0131   1034 E6 0B               JNZ     SERCHKC     ; or fail
0132   1036 A4 02 15            ORP     %$02,SCTL1  ; set the next bit
0133   1039 80 15               MOVP    SCTL1,A
0134   103B 23 03               AND     %$03,A 
0135   103D 2D 03               CMP     %$03,A      ; should be 3 now
0136   103F E2 1F               JZ      SERFOUND    ; if not fail
0137   1041             
0138   1041             SERCHKC:
0139   1041 A3 FC 18            ANDP    %$FC,SCTL1C  ; zero the 2 LS bits
0140   1044 80 18               MOVP    SCTL1C,A
0141   1046 23 03               AND     %$03,A
0142   1048 E6 19               JNZ     CHKPORT      ; fail if not zero
0143   104A A4 01 18            ORP     %$01,SCTL1C  ; set the bottom bit
0144   104D 80 18               MOVP    SCTL1C,A
0145   104F 23 03               AND     %$03,A 
0146   1051 2D 01               CMP     %$01,A       ; check if it's a one now
0147   1053 E6 0E               JNZ     CHKPORT      ; or fail
0148   1055 A4 02 18            ORP     %$02,SCTL1C  ; set the next bit
0149   1058 80 18               MOVP    SCTL1C,A
0150   105A 23 03               AND     %$03,A 
0151   105C 2D 03               CMP     %$03,A       ; should be 3 now
0152   105E E6 03               JNZ     CHKPORT      ; if not fail
0153   1060             SERFOUND:
0154   1060 74 01 03            OR      %$01,R3      ; UART detected, set this bit
0155   1063             
0156   1063             CHKPORT:
0157   1063 A3 00 1F            ANDP    %$00,FDDR
0158   1066 80 1F               MOVP    FDDR,A
0159   1068 E6 0C               JNZ     COPYCODE
0160   106A A4 FF 1F            ORP     %$FF,FDDR
0161   106D 80 1F               MOVP    FDDR,A
0162   106F 2D FF               CMP     %$FF,A
0163   1071 E6 03               JNZ     COPYCODE
0164   1073 74 40 03            OR      %$40,R3      ; Set bit 6 if this port exists
0165   1076             
0166   1076                     ; Copy code from External ROM to RAM
0167   1076             
0168   1076             COPYCODE:
0169   1076 72 10 02            MOV     %$10,R2     ; Byte Counter - our code is < 16 bytes
0170   1079 88 10 96 05         MOVD    %RAMCODE,R5 ; Start of ROM source
0171   107D 88 00 08 07         MOVD    %RAMDEST,R7 ; Start of RAM destination
0172   1081             CPYLOOP:
0173   1081 9A 05               LDA     *R5         ; grab code byte
0174   1083 9B 07               STA     *R7         ; move code byte
0175   1085 D3 07               INC     R7          ; increment destination
0176   1087 79 00 06            ADC     %$0,R6      ; ripple carry to high byte
0177   108A D3 05               INC     R5          ; increment source
0178   108C 79 00 04            ADC     %$0,R4      ; ripple carry to high byte
0179   108F D2 02               DEC     R2          ; done yet?
0180   1091 E6 EE               JNZ     CPYLOOP     ; if we are not done, loop to copy next byte
0181   1093                     ; our code copy to RAM is done
0182   1093 8C 00 08            BR      @RAMDEST    ; jump to code in RAM
0183   1096             
0184   1096             ; Start of code to be executed in RAM
0185   1096             ; (Must be relocatable)
0186   1096             
0187   1096             RAMCODE:
0188   1096 22 55               MOV     %$55,A      ; Byte signifying request to switch modes
0189   1098 8B 10 00            STA     @ARDADDR    ; switch modes
0190   109B 52 FF               MOV     %$FF,B      ; B = FF
0191   109D             DELAY:
0192   109D C2                  DEC     B           ; B = B-1
0193   109E E6 FD               JNZ     DELAY       ; wait a bit for things to settle
0194   10A0 8C 10 A3            BR      @BACK2ROM
0195   10A3             
0196   10A3             ;   Determine internal ROM size
0197   10A3             
0198   10A3             BACK2ROM:
0199   10A3 72 08 02            MOV     %$08,R2     ; Number of 2K pages
0200   10A6 88 C0 00 05         MOVD    %$C000,R5   ; Start of 16K ROM
0201   10AA 9A 05       CHKNXT: LDA     *R5
0202   10AC 32 04               MOV     R4,B        ; expected byte might have a bit 3 set, but we need to reset it
0203   10AE 53 F7               AND     %$F7,B      ; before comparing to the byte read from ROM
0204   10B0 6D                  CMP     B,A         ; expected byte in B if reading external memory
0205   10B1 E6 11               JNZ     FINISHUP
0206   10B3 D3 05               INC     R5
0207   10B5 7D 20 05            CMP     %$20,R5     ; done checking 32 bytes?
0208   10B8 E6 F0               JNZ     CHKNXT
0209   10BA 72 00 05            MOV     %$0,R5      ; if so, start next 2K region, + 0x0800
0210   10BD D2 02               DEC     R2          ; but first, subtract 1 from num of 2K regions
0211   10BF 78 08 04            ADD     %$8,R4
0212   10C2 E6 E6               JNZ     CHKNXT      ; done with all regions?
0213   10C4             
0214   10C4             FINISHUP:
0215   10C4                     ; Update R3 with # of 2K pages from R2
0216   10C4 B0                  CLRC                ; put 2K page counter into bits 2,3,4,5
0217   10C5 DE 02               RL      R2
0218   10C7 DE 02               RL      R2
0219   10C9 48 02 03            ADD     R2,R3       ; add to ID byte in the right place
0220   10CC             
0221   10CC                     ; at this point:
0222   10CC                     ;   R3 is the complete ID byte
0223   10CC                     ;   R4 is the high byte of the start of internal rom to dump 
0224   10CC                     ;     (or 00)
0225   10CC 72 00 05            MOV     %$00,R5     ; now R4:R5 is the start of internal ROM (or 0000)
0226   10CF             
0227   10CF             SENDID:
0228   10CF 12 03               MOV     R3,A
0229   10D1 8B 10 00            STA     @ARDADDR    ; send ID byte to the arduino
0230   10D4             
0231   10D4 7D 00 04            CMP     %$00,R4     ; check if no internal rom
0232   10D7 E2 0C               JZ      DONE
0233   10D9             
0234   10D9             NXTBYTE:
0235   10D9 9A 05               LDA     *R5         ; Read internal ROM byte
0236   10DB 8B 10 00            STA     @ARDADDR    ; send a byte to the arduino
0237   10DE             
0238   10DE D3 05               INC     R5          ; increment for next location to read
0239   10E0 79 00 04            ADC     %$0,R4
0240   10E3 E6 F4               JNZ     NXTBYTE     ; unless we roll over to 0000, do next byte
0241   10E5             
0242   10E5             DONE:
0243   10E5 E0 FE               JMP     DONE        ; loop forever
0244   10E7             
0245   10E7 FF FF FF FF         .FILL   $1100-$, $FF    ; Fill the rest of this 256 byte region
0245   10EB FF FF FF FF 
0245   10EF FF FF FF FF 
0245   10F3 FF FF FF FF 
0245   10F7 FF FF FF FF 
0245   10FB FF FF FF FF 
0245   10FF FF 
0246   1100             
0247   1100                     ; Now, create empty 256-byte regions for 4K pages $2000-$B000
0248   1100             
0249   2000                     .ORG    $2000
0250   2000 FF FF FF FF         .FILL   $100,$FF
0250   2004 FF FF FF FF 
0250   2008 FF FF FF FF 
0250   200C FF FF FF FF 
0250   2010 FF FF FF FF 
0250   2014 FF FF FF FF 
0250   2018 FF FF FF FF 
0250   201C FF FF FF FF 
0250   2020 FF FF FF FF 
0250   2024 FF FF FF FF 
0250   2028 FF FF FF FF 
0250   202C FF FF FF FF 
0250   2030 FF FF FF FF 
0250   2034 FF FF FF FF 
0250   2038 FF FF FF FF 
0250   203C FF FF FF FF 
0250   2040 FF FF FF FF 
0250   2044 FF FF FF FF 
0250   2048 FF FF FF FF 
0250   204C FF FF FF FF 
0250   2050 FF FF FF FF 
0250   2054 FF FF FF FF 
0250   2058 FF FF FF FF 
0250   205C FF FF FF FF 
0250   2060 FF FF FF FF 
0250   2064 FF FF FF FF 
0250   2068 FF FF FF FF 
0250   206C FF FF FF FF 
0250   2070 FF FF FF FF 
0250   2074 FF FF FF FF 
0250   2078 FF FF FF FF 
0250   207C FF FF FF FF 
0250   2080 FF FF FF FF 
0250   2084 FF FF FF FF 
0250   2088 FF FF FF FF 
0250   208C FF FF FF FF 
0250   2090 FF FF FF FF 
0250   2094 FF FF FF FF 
0250   2098 FF FF FF FF 
0250   209C FF FF FF FF 
0250   20A0 FF FF FF FF 
0250   20A4 FF FF FF FF 
0250   20A8 FF FF FF FF 
0250   20AC FF FF FF FF 
0250   20B0 FF FF FF FF 
0250   20B4 FF FF FF FF 
0250   20B8 FF FF FF FF 
0250   20BC FF FF FF FF 
0250   20C0 FF FF FF FF 
0250   20C4 FF FF FF FF 
0250   20C8 FF FF FF FF 
0250   20CC FF FF FF FF 
0250   20D0 FF FF FF FF 
0250   20D4 FF FF FF FF 
0250   20D8 FF FF FF FF 
0250   20DC FF FF FF FF 
0250   20E0 FF FF FF FF 
0250   20E4 FF FF FF FF 
0250   20E8 FF FF FF FF 
0250   20EC FF FF FF FF 
0250   20F0 FF FF FF FF 
0250   20F4 FF FF FF FF 
0250   20F8 FF FF FF FF 
0250   20FC FF FF FF FF 
0251   2100             
0252   3000                     .ORG    $3000
0253   3000 FF FF FF FF         .FILL   $100,$FF
0253   3004 FF FF FF FF 
0253   3008 FF FF FF FF 
0253   300C FF FF FF FF 
0253   3010 FF FF FF FF 
0253   3014 FF FF FF FF 
0253   3018 FF FF FF FF 
0253   301C FF FF FF FF 
0253   3020 FF FF FF FF 
0253   3024 FF FF FF FF 
0253   3028 FF FF FF FF 
0253   302C FF FF FF FF 
0253   3030 FF FF FF FF 
0253   3034 FF FF FF FF 
0253   3038 FF FF FF FF 
0253   303C FF FF FF FF 
0253   3040 FF FF FF FF 
0253   3044 FF FF FF FF 
0253   3048 FF FF FF FF 
0253   304C FF FF FF FF 
0253   3050 FF FF FF FF 
0253   3054 FF FF FF FF 
0253   3058 FF FF FF FF 
0253   305C FF FF FF FF 
0253   3060 FF FF FF FF 
0253   3064 FF FF FF FF 
0253   3068 FF FF FF FF 
0253   306C FF FF FF FF 
0253   3070 FF FF FF FF 
0253   3074 FF FF FF FF 
0253   3078 FF FF FF FF 
0253   307C FF FF FF FF 
0253   3080 FF FF FF FF 
0253   3084 FF FF FF FF 
0253   3088 FF FF FF FF 
0253   308C FF FF FF FF 
0253   3090 FF FF FF FF 
0253   3094 FF FF FF FF 
0253   3098 FF FF FF FF 
0253   309C FF FF FF FF 
0253   30A0 FF FF FF FF 
0253   30A4 FF FF FF FF 
0253   30A8 FF FF FF FF 
0253   30AC FF FF FF FF 
0253   30B0 FF FF FF FF 
0253   30B4 FF FF FF FF 
0253   30B8 FF FF FF FF 
0253   30BC FF FF FF FF 
0253   30C0 FF FF FF FF 
0253   30C4 FF FF FF FF 
0253   30C8 FF FF FF FF 
0253   30CC FF FF FF FF 
0253   30D0 FF FF FF FF 
0253   30D4 FF FF FF FF 
0253   30D8 FF FF FF FF 
0253   30DC FF FF FF FF 
0253   30E0 FF FF FF FF 
0253   30E4 FF FF FF FF 
0253   30E8 FF FF FF FF 
0253   30EC FF FF FF FF 
0253   30F0 FF FF FF FF 
0253   30F4 FF FF FF FF 
0253   30F8 FF FF FF FF 
0253   30FC FF FF FF FF 
0254   3100             
0255   4000                     .ORG    $4000
0256   4000 FF FF FF FF         .FILL   $100,$FF
0256   4004 FF FF FF FF 
0256   4008 FF FF FF FF 
0256   400C FF FF FF FF 
0256   4010 FF FF FF FF 
0256   4014 FF FF FF FF 
0256   4018 FF FF FF FF 
0256   401C FF FF FF FF 
0256   4020 FF FF FF FF 
0256   4024 FF FF FF FF 
0256   4028 FF FF FF FF 
0256   402C FF FF FF FF 
0256   4030 FF FF FF FF 
0256   4034 FF FF FF FF 
0256   4038 FF FF FF FF 
0256   403C FF FF FF FF 
0256   4040 FF FF FF FF 
0256   4044 FF FF FF FF 
0256   4048 FF FF FF FF 
0256   404C FF FF FF FF 
0256   4050 FF FF FF FF 
0256   4054 FF FF FF FF 
0256   4058 FF FF FF FF 
0256   405C FF FF FF FF 
0256   4060 FF FF FF FF 
0256   4064 FF FF FF FF 
0256   4068 FF FF FF FF 
0256   406C FF FF FF FF 
0256   4070 FF FF FF FF 
0256   4074 FF FF FF FF 
0256   4078 FF FF FF FF 
0256   407C FF FF FF FF 
0256   4080 FF FF FF FF 
0256   4084 FF FF FF FF 
0256   4088 FF FF FF FF 
0256   408C FF FF FF FF 
0256   4090 FF FF FF FF 
0256   4094 FF FF FF FF 
0256   4098 FF FF FF FF 
0256   409C FF FF FF FF 
0256   40A0 FF FF FF FF 
0256   40A4 FF FF FF FF 
0256   40A8 FF FF FF FF 
0256   40AC FF FF FF FF 
0256   40B0 FF FF FF FF 
0256   40B4 FF FF FF FF 
0256   40B8 FF FF FF FF 
0256   40BC FF FF FF FF 
0256   40C0 FF FF FF FF 
0256   40C4 FF FF FF FF 
0256   40C8 FF FF FF FF 
0256   40CC FF FF FF FF 
0256   40D0 FF FF FF FF 
0256   40D4 FF FF FF FF 
0256   40D8 FF FF FF FF 
0256   40DC FF FF FF FF 
0256   40E0 FF FF FF FF 
0256   40E4 FF FF FF FF 
0256   40E8 FF FF FF FF 
0256   40EC FF FF FF FF 
0256   40F0 FF FF FF FF 
0256   40F4 FF FF FF FF 
0256   40F8 FF FF FF FF 
0256   40FC FF FF FF FF 
0257   4100             
0258   5000                     .ORG    $5000
0259   5000 FF FF FF FF         .FILL   $100,$FF
0259   5004 FF FF FF FF 
0259   5008 FF FF FF FF 
0259   500C FF FF FF FF 
0259   5010 FF FF FF FF 
0259   5014 FF FF FF FF 
0259   5018 FF FF FF FF 
0259   501C FF FF FF FF 
0259   5020 FF FF FF FF 
0259   5024 FF FF FF FF 
0259   5028 FF FF FF FF 
0259   502C FF FF FF FF 
0259   5030 FF FF FF FF 
0259   5034 FF FF FF FF 
0259   5038 FF FF FF FF 
0259   503C FF FF FF FF 
0259   5040 FF FF FF FF 
0259   5044 FF FF FF FF 
0259   5048 FF FF FF FF 
0259   504C FF FF FF FF 
0259   5050 FF FF FF FF 
0259   5054 FF FF FF FF 
0259   5058 FF FF FF FF 
0259   505C FF FF FF FF 
0259   5060 FF FF FF FF 
0259   5064 FF FF FF FF 
0259   5068 FF FF FF FF 
0259   506C FF FF FF FF 
0259   5070 FF FF FF FF 
0259   5074 FF FF FF FF 
0259   5078 FF FF FF FF 
0259   507C FF FF FF FF 
0259   5080 FF FF FF FF 
0259   5084 FF FF FF FF 
0259   5088 FF FF FF FF 
0259   508C FF FF FF FF 
0259   5090 FF FF FF FF 
0259   5094 FF FF FF FF 
0259   5098 FF FF FF FF 
0259   509C FF FF FF FF 
0259   50A0 FF FF FF FF 
0259   50A4 FF FF FF FF 
0259   50A8 FF FF FF FF 
0259   50AC FF FF FF FF 
0259   50B0 FF FF FF FF 
0259   50B4 FF FF FF FF 
0259   50B8 FF FF FF FF 
0259   50BC FF FF FF FF 
0259   50C0 FF FF FF FF 
0259   50C4 FF FF FF FF 
0259   50C8 FF FF FF FF 
0259   50CC FF FF FF FF 
0259   50D0 FF FF FF FF 
0259   50D4 FF FF FF FF 
0259   50D8 FF FF FF FF 
0259   50DC FF FF FF FF 
0259   50E0 FF FF FF FF 
0259   50E4 FF FF FF FF 
0259   50E8 FF FF FF FF 
0259   50EC FF FF FF FF 
0259   50F0 FF FF FF FF 
0259   50F4 FF FF FF FF 
0259   50F8 FF FF FF FF 
0259   50FC FF FF FF FF 
0260   5100             
0261   6000                     .ORG    $6000
0262   6000 FF FF FF FF         .FILL   $100,$FF
0262   6004 FF FF FF FF 
0262   6008 FF FF FF FF 
0262   600C FF FF FF FF 
0262   6010 FF FF FF FF 
0262   6014 FF FF FF FF 
0262   6018 FF FF FF FF 
0262   601C FF FF FF FF 
0262   6020 FF FF FF FF 
0262   6024 FF FF FF FF 
0262   6028 FF FF FF FF 
0262   602C FF FF FF FF 
0262   6030 FF FF FF FF 
0262   6034 FF FF FF FF 
0262   6038 FF FF FF FF 
0262   603C FF FF FF FF 
0262   6040 FF FF FF FF 
0262   6044 FF FF FF FF 
0262   6048 FF FF FF FF 
0262   604C FF FF FF FF 
0262   6050 FF FF FF FF 
0262   6054 FF FF FF FF 
0262   6058 FF FF FF FF 
0262   605C FF FF FF FF 
0262   6060 FF FF FF FF 
0262   6064 FF FF FF FF 
0262   6068 FF FF FF FF 
0262   606C FF FF FF FF 
0262   6070 FF FF FF FF 
0262   6074 FF FF FF FF 
0262   6078 FF FF FF FF 
0262   607C FF FF FF FF 
0262   6080 FF FF FF FF 
0262   6084 FF FF FF FF 
0262   6088 FF FF FF FF 
0262   608C FF FF FF FF 
0262   6090 FF FF FF FF 
0262   6094 FF FF FF FF 
0262   6098 FF FF FF FF 
0262   609C FF FF FF FF 
0262   60A0 FF FF FF FF 
0262   60A4 FF FF FF FF 
0262   60A8 FF FF FF FF 
0262   60AC FF FF FF FF 
0262   60B0 FF FF FF FF 
0262   60B4 FF FF FF FF 
0262   60B8 FF FF FF FF 
0262   60BC FF FF FF FF 
0262   60C0 FF FF FF FF 
0262   60C4 FF FF FF FF 
0262   60C8 FF FF FF FF 
0262   60CC FF FF FF FF 
0262   60D0 FF FF FF FF 
0262   60D4 FF FF FF FF 
0262   60D8 FF FF FF FF 
0262   60DC FF FF FF FF 
0262   60E0 FF FF FF FF 
0262   60E4 FF FF FF FF 
0262   60E8 FF FF FF FF 
0262   60EC FF FF FF FF 
0262   60F0 FF FF FF FF 
0262   60F4 FF FF FF FF 
0262   60F8 FF FF FF FF 
0262   60FC FF FF FF FF 
0263   6100             
0264   7000                     .ORG    $7000
0265   7000 FF FF FF FF         .FILL   $100,$FF
0265   7004 FF FF FF FF 
0265   7008 FF FF FF FF 
0265   700C FF FF FF FF 
0265   7010 FF FF FF FF 
0265   7014 FF FF FF FF 
0265   7018 FF FF FF FF 
0265   701C FF FF FF FF 
0265   7020 FF FF FF FF 
0265   7024 FF FF FF FF 
0265   7028 FF FF FF FF 
0265   702C FF FF FF FF 
0265   7030 FF FF FF FF 
0265   7034 FF FF FF FF 
0265   7038 FF FF FF FF 
0265   703C FF FF FF FF 
0265   7040 FF FF FF FF 
0265   7044 FF FF FF FF 
0265   7048 FF FF FF FF 
0265   704C FF FF FF FF 
0265   7050 FF FF FF FF 
0265   7054 FF FF FF FF 
0265   7058 FF FF FF FF 
0265   705C FF FF FF FF 
0265   7060 FF FF FF FF 
0265   7064 FF FF FF FF 
0265   7068 FF FF FF FF 
0265   706C FF FF FF FF 
0265   7070 FF FF FF FF 
0265   7074 FF FF FF FF 
0265   7078 FF FF FF FF 
0265   707C FF FF FF FF 
0265   7080 FF FF FF FF 
0265   7084 FF FF FF FF 
0265   7088 FF FF FF FF 
0265   708C FF FF FF FF 
0265   7090 FF FF FF FF 
0265   7094 FF FF FF FF 
0265   7098 FF FF FF FF 
0265   709C FF FF FF FF 
0265   70A0 FF FF FF FF 
0265   70A4 FF FF FF FF 
0265   70A8 FF FF FF FF 
0265   70AC FF FF FF FF 
0265   70B0 FF FF FF FF 
0265   70B4 FF FF FF FF 
0265   70B8 FF FF FF FF 
0265   70BC FF FF FF FF 
0265   70C0 FF FF FF FF 
0265   70C4 FF FF FF FF 
0265   70C8 FF FF FF FF 
0265   70CC FF FF FF FF 
0265   70D0 FF FF FF FF 
0265   70D4 FF FF FF FF 
0265   70D8 FF FF FF FF 
0265   70DC FF FF FF FF 
0265   70E0 FF FF FF FF 
0265   70E4 FF FF FF FF 
0265   70E8 FF FF FF FF 
0265   70EC FF FF FF FF 
0265   70F0 FF FF FF FF 
0265   70F4 FF FF FF FF 
0265   70F8 FF FF FF FF 
0265   70FC FF FF FF FF 
0266   7100             
0267   8000                     .ORG    $8000
0268   8000 FF FF FF FF         .FILL   $100,$FF
0268   8004 FF FF FF FF 
0268   8008 FF FF FF FF 
0268   800C FF FF FF FF 
0268   8010 FF FF FF FF 
0268   8014 FF FF FF FF 
0268   8018 FF FF FF FF 
0268   801C FF FF FF FF 
0268   8020 FF FF FF FF 
0268   8024 FF FF FF FF 
0268   8028 FF FF FF FF 
0268   802C FF FF FF FF 
0268   8030 FF FF FF FF 
0268   8034 FF FF FF FF 
0268   8038 FF FF FF FF 
0268   803C FF FF FF FF 
0268   8040 FF FF FF FF 
0268   8044 FF FF FF FF 
0268   8048 FF FF FF FF 
0268   804C FF FF FF FF 
0268   8050 FF FF FF FF 
0268   8054 FF FF FF FF 
0268   8058 FF FF FF FF 
0268   805C FF FF FF FF 
0268   8060 FF FF FF FF 
0268   8064 FF FF FF FF 
0268   8068 FF FF FF FF 
0268   806C FF FF FF FF 
0268   8070 FF FF FF FF 
0268   8074 FF FF FF FF 
0268   8078 FF FF FF FF 
0268   807C FF FF FF FF 
0268   8080 FF FF FF FF 
0268   8084 FF FF FF FF 
0268   8088 FF FF FF FF 
0268   808C FF FF FF FF 
0268   8090 FF FF FF FF 
0268   8094 FF FF FF FF 
0268   8098 FF FF FF FF 
0268   809C FF FF FF FF 
0268   80A0 FF FF FF FF 
0268   80A4 FF FF FF FF 
0268   80A8 FF FF FF FF 
0268   80AC FF FF FF FF 
0268   80B0 FF FF FF FF 
0268   80B4 FF FF FF FF 
0268   80B8 FF FF FF FF 
0268   80BC FF FF FF FF 
0268   80C0 FF FF FF FF 
0268   80C4 FF FF FF FF 
0268   80C8 FF FF FF FF 
0268   80CC FF FF FF FF 
0268   80D0 FF FF FF FF 
0268   80D4 FF FF FF FF 
0268   80D8 FF FF FF FF 
0268   80DC FF FF FF FF 
0268   80E0 FF FF FF FF 
0268   80E4 FF FF FF FF 
0268   80E8 FF FF FF FF 
0268   80EC FF FF FF FF 
0268   80F0 FF FF FF FF 
0268   80F4 FF FF FF FF 
0268   80F8 FF FF FF FF 
0268   80FC FF FF FF FF 
0269   8100             
0270   9000                     .ORG    $9000
0271   9000 FF FF FF FF         .FILL   $100,$FF
0271   9004 FF FF FF FF 
0271   9008 FF FF FF FF 
0271   900C FF FF FF FF 
0271   9010 FF FF FF FF 
0271   9014 FF FF FF FF 
0271   9018 FF FF FF FF 
0271   901C FF FF FF FF 
0271   9020 FF FF FF FF 
0271   9024 FF FF FF FF 
0271   9028 FF FF FF FF 
0271   902C FF FF FF FF 
0271   9030 FF FF FF FF 
0271   9034 FF FF FF FF 
0271   9038 FF FF FF FF 
0271   903C FF FF FF FF 
0271   9040 FF FF FF FF 
0271   9044 FF FF FF FF 
0271   9048 FF FF FF FF 
0271   904C FF FF FF FF 
0271   9050 FF FF FF FF 
0271   9054 FF FF FF FF 
0271   9058 FF FF FF FF 
0271   905C FF FF FF FF 
0271   9060 FF FF FF FF 
0271   9064 FF FF FF FF 
0271   9068 FF FF FF FF 
0271   906C FF FF FF FF 
0271   9070 FF FF FF FF 
0271   9074 FF FF FF FF 
0271   9078 FF FF FF FF 
0271   907C FF FF FF FF 
0271   9080 FF FF FF FF 
0271   9084 FF FF FF FF 
0271   9088 FF FF FF FF 
0271   908C FF FF FF FF 
0271   9090 FF FF FF FF 
0271   9094 FF FF FF FF 
0271   9098 FF FF FF FF 
0271   909C FF FF FF FF 
0271   90A0 FF FF FF FF 
0271   90A4 FF FF FF FF 
0271   90A8 FF FF FF FF 
0271   90AC FF FF FF FF 
0271   90B0 FF FF FF FF 
0271   90B4 FF FF FF FF 
0271   90B8 FF FF FF FF 
0271   90BC FF FF FF FF 
0271   90C0 FF FF FF FF 
0271   90C4 FF FF FF FF 
0271   90C8 FF FF FF FF 
0271   90CC FF FF FF FF 
0271   90D0 FF FF FF FF 
0271   90D4 FF FF FF FF 
0271   90D8 FF FF FF FF 
0271   90DC FF FF FF FF 
0271   90E0 FF FF FF FF 
0271   90E4 FF FF FF FF 
0271   90E8 FF FF FF FF 
0271   90EC FF FF FF FF 
0271   90F0 FF FF FF FF 
0271   90F4 FF FF FF FF 
0271   90F8 FF FF FF FF 
0271   90FC FF FF FF FF 
0272   9100             
0273   A000                     .ORG    $A000
0274   A000 FF FF FF FF         .FILL   $100,$FF
0274   A004 FF FF FF FF 
0274   A008 FF FF FF FF 
0274   A00C FF FF FF FF 
0274   A010 FF FF FF FF 
0274   A014 FF FF FF FF 
0274   A018 FF FF FF FF 
0274   A01C FF FF FF FF 
0274   A020 FF FF FF FF 
0274   A024 FF FF FF FF 
0274   A028 FF FF FF FF 
0274   A02C FF FF FF FF 
0274   A030 FF FF FF FF 
0274   A034 FF FF FF FF 
0274   A038 FF FF FF FF 
0274   A03C FF FF FF FF 
0274   A040 FF FF FF FF 
0274   A044 FF FF FF FF 
0274   A048 FF FF FF FF 
0274   A04C FF FF FF FF 
0274   A050 FF FF FF FF 
0274   A054 FF FF FF FF 
0274   A058 FF FF FF FF 
0274   A05C FF FF FF FF 
0274   A060 FF FF FF FF 
0274   A064 FF FF FF FF 
0274   A068 FF FF FF FF 
0274   A06C FF FF FF FF 
0274   A070 FF FF FF FF 
0274   A074 FF FF FF FF 
0274   A078 FF FF FF FF 
0274   A07C FF FF FF FF 
0274   A080 FF FF FF FF 
0274   A084 FF FF FF FF 
0274   A088 FF FF FF FF 
0274   A08C FF FF FF FF 
0274   A090 FF FF FF FF 
0274   A094 FF FF FF FF 
0274   A098 FF FF FF FF 
0274   A09C FF FF FF FF 
0274   A0A0 FF FF FF FF 
0274   A0A4 FF FF FF FF 
0274   A0A8 FF FF FF FF 
0274   A0AC FF FF FF FF 
0274   A0B0 FF FF FF FF 
0274   A0B4 FF FF FF FF 
0274   A0B8 FF FF FF FF 
0274   A0BC FF FF FF FF 
0274   A0C0 FF FF FF FF 
0274   A0C4 FF FF FF FF 
0274   A0C8 FF FF FF FF 
0274   A0CC FF FF FF FF 
0274   A0D0 FF FF FF FF 
0274   A0D4 FF FF FF FF 
0274   A0D8 FF FF FF FF 
0274   A0DC FF FF FF FF 
0274   A0E0 FF FF FF FF 
0274   A0E4 FF FF FF FF 
0274   A0E8 FF FF FF FF 
0274   A0EC FF FF FF FF 
0274   A0F0 FF FF FF FF 
0274   A0F4 FF FF FF FF 
0274   A0F8 FF FF FF FF 
0274   A0FC FF FF FF FF 
0275   A100             
0276   B000                     .ORG    $B000
0277   B000 FF FF FF FF         .FILL   $100,$FF
0277   B004 FF FF FF FF 
0277   B008 FF FF FF FF 
0277   B00C FF FF FF FF 
0277   B010 FF FF FF FF 
0277   B014 FF FF FF FF 
0277   B018 FF FF FF FF 
0277   B01C FF FF FF FF 
0277   B020 FF FF FF FF 
0277   B024 FF FF FF FF 
0277   B028 FF FF FF FF 
0277   B02C FF FF FF FF 
0277   B030 FF FF FF FF 
0277   B034 FF FF FF FF 
0277   B038 FF FF FF FF 
0277   B03C FF FF FF FF 
0277   B040 FF FF FF FF 
0277   B044 FF FF FF FF 
0277   B048 FF FF FF FF 
0277   B04C FF FF FF FF 
0277   B050 FF FF FF FF 
0277   B054 FF FF FF FF 
0277   B058 FF FF FF FF 
0277   B05C FF FF FF FF 
0277   B060 FF FF FF FF 
0277   B064 FF FF FF FF 
0277   B068 FF FF FF FF 
0277   B06C FF FF FF FF 
0277   B070 FF FF FF FF 
0277   B074 FF FF FF FF 
0277   B078 FF FF FF FF 
0277   B07C FF FF FF FF 
0277   B080 FF FF FF FF 
0277   B084 FF FF FF FF 
0277   B088 FF FF FF FF 
0277   B08C FF FF FF FF 
0277   B090 FF FF FF FF 
0277   B094 FF FF FF FF 
0277   B098 FF FF FF FF 
0277   B09C FF FF FF FF 
0277   B0A0 FF FF FF FF 
0277   B0A4 FF FF FF FF 
0277   B0A8 FF FF FF FF 
0277   B0AC FF FF FF FF 
0277   B0B0 FF FF FF FF 
0277   B0B4 FF FF FF FF 
0277   B0B8 FF FF FF FF 
0277   B0BC FF FF FF FF 
0277   B0C0 FF FF FF FF 
0277   B0C4 FF FF FF FF 
0277   B0C8 FF FF FF FF 
0277   B0CC FF FF FF FF 
0277   B0D0 FF FF FF FF 
0277   B0D4 FF FF FF FF 
0277   B0D8 FF FF FF FF 
0277   B0DC FF FF FF FF 
0277   B0E0 FF FF FF FF 
0277   B0E4 FF FF FF FF 
0277   B0E8 FF FF FF FF 
0277   B0EC FF FF FF FF 
0277   B0F0 FF FF FF FF 
0277   B0F4 FF FF FF FF 
0277   B0F8 FF FF FF FF 
0277   B0FC FF FF FF FF 
0278   B100             
0279   B100             ; We fill the first 32 bytes of each of the last 4K regions with the high byte of the region
0280   B100             ; (This shows up as the first 32 bytes in every 256 byte block of this region)
0281   B100             ; We try to read them at the start of each 2K block, to determine if we are reading external or internal ROM
0282   B100             ; In this way, we determine how much internal ROM there is
0283   B100             
0284   C000                     .ORG    $C000       ; External Memory in the last 16K
0285   C000 C0 C0 C0 C0         .FILL   $20,$C0     ; If this data is read in Full Expansion mode at $C000, then this is not a 16K internal ROM chip
0285   C004 C0 C0 C0 C0 
0285   C008 C0 C0 C0 C0 
0285   C00C C0 C0 C0 C0 
0285   C010 C0 C0 C0 C0 
0285   C014 C0 C0 C0 C0 
0285   C018 C0 C0 C0 C0 
0285   C01C C0 C0 C0 C0 
0286   C020                                         ; If this data is read in Full Expansion mode at $C800, then this is not a 14K internal ROM chip
0287   C020 FF FF FF FF         .FILL   $C100-$,$FF ; Fill the rest of this 256-byte block
0287   C024 FF FF FF FF 
0287   C028 FF FF FF FF 
0287   C02C FF FF FF FF 
0287   C030 FF FF FF FF 
0287   C034 FF FF FF FF 
0287   C038 FF FF FF FF 
0287   C03C FF FF FF FF 
0287   C040 FF FF FF FF 
0287   C044 FF FF FF FF 
0287   C048 FF FF FF FF 
0287   C04C FF FF FF FF 
0287   C050 FF FF FF FF 
0287   C054 FF FF FF FF 
0287   C058 FF FF FF FF 
0287   C05C FF FF FF FF 
0287   C060 FF FF FF FF 
0287   C064 FF FF FF FF 
0287   C068 FF FF FF FF 
0287   C06C FF FF FF FF 
0287   C070 FF FF FF FF 
0287   C074 FF FF FF FF 
0287   C078 FF FF FF FF 
0287   C07C FF FF FF FF 
0287   C080 FF FF FF FF 
0287   C084 FF FF FF FF 
0287   C088 FF FF FF FF 
0287   C08C FF FF FF FF 
0287   C090 FF FF FF FF 
0287   C094 FF FF FF FF 
0287   C098 FF FF FF FF 
0287   C09C FF FF FF FF 
0287   C0A0 FF FF FF FF 
0287   C0A4 FF FF FF FF 
0287   C0A8 FF FF FF FF 
0287   C0AC FF FF FF FF 
0287   C0B0 FF FF FF FF 
0287   C0B4 FF FF FF FF 
0287   C0B8 FF FF FF FF 
0287   C0BC FF FF FF FF 
0287   C0C0 FF FF FF FF 
0287   C0C4 FF FF FF FF 
0287   C0C8 FF FF FF FF 
0287   C0CC FF FF FF FF 
0287   C0D0 FF FF FF FF 
0287   C0D4 FF FF FF FF 
0287   C0D8 FF FF FF FF 
0287   C0DC FF FF FF FF 
0287   C0E0 FF FF FF FF 
0287   C0E4 FF FF FF FF 
0287   C0E8 FF FF FF FF 
0287   C0EC FF FF FF FF 
0287   C0F0 FF FF FF FF 
0287   C0F4 FF FF FF FF 
0287   C0F8 FF FF FF FF 
0287   C0FC FF FF FF FF 
0288   C100             
0289   C100             
0290   D000                     .ORG    $D000       ; External Memory in the last 12K
0291   D000 D0 D0 D0 D0         .FILL   $20,$D0     ; If this data is read in Full Expansion mode at $D000, then this is not a 12K internal ROM chip
0291   D004 D0 D0 D0 D0 
0291   D008 D0 D0 D0 D0 
0291   D00C D0 D0 D0 D0 
0291   D010 D0 D0 D0 D0 
0291   D014 D0 D0 D0 D0 
0291   D018 D0 D0 D0 D0 
0291   D01C D0 D0 D0 D0 
0292   D020                                         ; If this data is read in Full Expansion mode at $D800, then this is not a 10K internal ROM chip
0293   D020 FF FF FF FF         .FILL   $D100-$,$FF ; Fill the rest of this 256-byte block
0293   D024 FF FF FF FF 
0293   D028 FF FF FF FF 
0293   D02C FF FF FF FF 
0293   D030 FF FF FF FF 
0293   D034 FF FF FF FF 
0293   D038 FF FF FF FF 
0293   D03C FF FF FF FF 
0293   D040 FF FF FF FF 
0293   D044 FF FF FF FF 
0293   D048 FF FF FF FF 
0293   D04C FF FF FF FF 
0293   D050 FF FF FF FF 
0293   D054 FF FF FF FF 
0293   D058 FF FF FF FF 
0293   D05C FF FF FF FF 
0293   D060 FF FF FF FF 
0293   D064 FF FF FF FF 
0293   D068 FF FF FF FF 
0293   D06C FF FF FF FF 
0293   D070 FF FF FF FF 
0293   D074 FF FF FF FF 
0293   D078 FF FF FF FF 
0293   D07C FF FF FF FF 
0293   D080 FF FF FF FF 
0293   D084 FF FF FF FF 
0293   D088 FF FF FF FF 
0293   D08C FF FF FF FF 
0293   D090 FF FF FF FF 
0293   D094 FF FF FF FF 
0293   D098 FF FF FF FF 
0293   D09C FF FF FF FF 
0293   D0A0 FF FF FF FF 
0293   D0A4 FF FF FF FF 
0293   D0A8 FF FF FF FF 
0293   D0AC FF FF FF FF 
0293   D0B0 FF FF FF FF 
0293   D0B4 FF FF FF FF 
0293   D0B8 FF FF FF FF 
0293   D0BC FF FF FF FF 
0293   D0C0 FF FF FF FF 
0293   D0C4 FF FF FF FF 
0293   D0C8 FF FF FF FF 
0293   D0CC FF FF FF FF 
0293   D0D0 FF FF FF FF 
0293   D0D4 FF FF FF FF 
0293   D0D8 FF FF FF FF 
0293   D0DC FF FF FF FF 
0293   D0E0 FF FF FF FF 
0293   D0E4 FF FF FF FF 
0293   D0E8 FF FF FF FF 
0293   D0EC FF FF FF FF 
0293   D0F0 FF FF FF FF 
0293   D0F4 FF FF FF FF 
0293   D0F8 FF FF FF FF 
0293   D0FC FF FF FF FF 
0294   D100             
0295   E000                     .ORG    $E000       ; External Memory in the last 8K
0296   E000 E0 E0 E0 E0         .FILL   $20,$E0     ; If this data is read in Full Expansion mode at $E000, then this is not a 8K internal ROM chip
0296   E004 E0 E0 E0 E0 
0296   E008 E0 E0 E0 E0 
0296   E00C E0 E0 E0 E0 
0296   E010 E0 E0 E0 E0 
0296   E014 E0 E0 E0 E0 
0296   E018 E0 E0 E0 E0 
0296   E01C E0 E0 E0 E0 
0297   E020                                         ; If this data is read in Full Expansion mode at $E800, then this is not a 6K internal ROM chip
0298   E020 FF FF FF FF         .FILL   $E100-$,$FF ; Fill the rest of this 256-byte block
0298   E024 FF FF FF FF 
0298   E028 FF FF FF FF 
0298   E02C FF FF FF FF 
0298   E030 FF FF FF FF 
0298   E034 FF FF FF FF 
0298   E038 FF FF FF FF 
0298   E03C FF FF FF FF 
0298   E040 FF FF FF FF 
0298   E044 FF FF FF FF 
0298   E048 FF FF FF FF 
0298   E04C FF FF FF FF 
0298   E050 FF FF FF FF 
0298   E054 FF FF FF FF 
0298   E058 FF FF FF FF 
0298   E05C FF FF FF FF 
0298   E060 FF FF FF FF 
0298   E064 FF FF FF FF 
0298   E068 FF FF FF FF 
0298   E06C FF FF FF FF 
0298   E070 FF FF FF FF 
0298   E074 FF FF FF FF 
0298   E078 FF FF FF FF 
0298   E07C FF FF FF FF 
0298   E080 FF FF FF FF 
0298   E084 FF FF FF FF 
0298   E088 FF FF FF FF 
0298   E08C FF FF FF FF 
0298   E090 FF FF FF FF 
0298   E094 FF FF FF FF 
0298   E098 FF FF FF FF 
0298   E09C FF FF FF FF 
0298   E0A0 FF FF FF FF 
0298   E0A4 FF FF FF FF 
0298   E0A8 FF FF FF FF 
0298   E0AC FF FF FF FF 
0298   E0B0 FF FF FF FF 
0298   E0B4 FF FF FF FF 
0298   E0B8 FF FF FF FF 
0298   E0BC FF FF FF FF 
0298   E0C0 FF FF FF FF 
0298   E0C4 FF FF FF FF 
0298   E0C8 FF FF FF FF 
0298   E0CC FF FF FF FF 
0298   E0D0 FF FF FF FF 
0298   E0D4 FF FF FF FF 
0298   E0D8 FF FF FF FF 
0298   E0DC FF FF FF FF 
0298   E0E0 FF FF FF FF 
0298   E0E4 FF FF FF FF 
0298   E0E8 FF FF FF FF 
0298   E0EC FF FF FF FF 
0298   E0F0 FF FF FF FF 
0298   E0F4 FF FF FF FF 
0298   E0F8 FF FF FF FF 
0298   E0FC FF FF FF FF 
0299   E100             
0300   FF00                     .ORG    $FF00       ; External Memory in the last 4K
0301   FF00 F0 F0 F0 F0         .FILL   $20,$F0     ; If this data is read in Full Expansion mode at $F000, then this is not a 4K internal ROM chip
0301   FF04 F0 F0 F0 F0 
0301   FF08 F0 F0 F0 F0 
0301   FF0C F0 F0 F0 F0 
0301   FF10 F0 F0 F0 F0 
0301   FF14 F0 F0 F0 F0 
0301   FF18 F0 F0 F0 F0 
0301   FF1C F0 F0 F0 F0 
0302   FF20                                         ; If this data is read in Full Expansion mode at $F800, then this is not a 2K internal ROM chip
0303   FF20 FF FF FF FF         .FILL   $FFF4-$,$FF ; Fill the gap up to the Vectors in this 256-byte block
0303   FF24 FF FF FF FF 
0303   FF28 FF FF FF FF 
0303   FF2C FF FF FF FF 
0303   FF30 FF FF FF FF 
0303   FF34 FF FF FF FF 
0303   FF38 FF FF FF FF 
0303   FF3C FF FF FF FF 
0303   FF40 FF FF FF FF 
0303   FF44 FF FF FF FF 
0303   FF48 FF FF FF FF 
0303   FF4C FF FF FF FF 
0303   FF50 FF FF FF FF 
0303   FF54 FF FF FF FF 
0303   FF58 FF FF FF FF 
0303   FF5C FF FF FF FF 
0303   FF60 FF FF FF FF 
0303   FF64 FF FF FF FF 
0303   FF68 FF FF FF FF 
0303   FF6C FF FF FF FF 
0303   FF70 FF FF FF FF 
0303   FF74 FF FF FF FF 
0303   FF78 FF FF FF FF 
0303   FF7C FF FF FF FF 
0303   FF80 FF FF FF FF 
0303   FF84 FF FF FF FF 
0303   FF88 FF FF FF FF 
0303   FF8C FF FF FF FF 
0303   FF90 FF FF FF FF 
0303   FF94 FF FF FF FF 
0303   FF98 FF FF FF FF 
0303   FF9C FF FF FF FF 
0303   FFA0 FF FF FF FF 
0303   FFA4 FF FF FF FF 
0303   FFA8 FF FF FF FF 
0303   FFAC FF FF FF FF 
0303   FFB0 FF FF FF FF 
0303   FFB4 FF FF FF FF 
0303   FFB8 FF FF FF FF 
0303   FFBC FF FF FF FF 
0303   FFC0 FF FF FF FF 
0303   FFC4 FF FF FF FF 
0303   FFC8 FF FF FF FF 
0303   FFCC FF FF FF FF 
0303   FFD0 FF FF FF FF 
0303   FFD4 FF FF FF FF 
0303   FFD8 FF FF FF FF 
0303   FFDC FF FF FF FF 
0303   FFE0 FF FF FF FF 
0303   FFE4 FF FF FF FF 
0303   FFE8 FF FF FF FF 
0303   FFEC FF FF FF FF 
0303   FFF0 FF FF FF FF 
0304   FFF4             
0305   FFF4                     ; Vectors go here
0306   FFF4             
0307   FFF4                     .ORG    $FFF4
0308   FFF4             
0309   FFF4                     .MSFIRST            ; need this, or .word statements are backwards for this CPU!
0310   FFF4             
0311   FFF4 10 00               .word   START       ;  INT5 vector
0312   FFF6 10 00               .word   START       ;  INT4 vector
0313   FFF8 10 00               .word   START       ; ~INT3 vector
0314   FFFA 10 00               .word   START       ;  INT2 vector
0315   FFFC 10 00               .word   START       ; ~INT1 vector
0316   FFFE 10 00               .word   START       ; ~RESET vector
0317   10000             
0318   10000                     .end
0319   10000             
0320   10000             
tasm: Number of errors = 0
